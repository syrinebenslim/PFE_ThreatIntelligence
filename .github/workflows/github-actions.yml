name: Threat Intelligence GitHub Actions CI/CD pipeline
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ

on: [push]

jobs:
  Explore-GitHub-Actions:
    runs-on: self-hosted

    steps:
      # √âtape 1 : Informations sur le d√©clencheur
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # √âtape 2 : V√©rifier le code
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."

      # √âtape 3 : V√©rifier et configurer Python
      - name: Ensure Python is installed
        run: |
          echo "Ensuring Python is installed..."
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          sudo ln -sf /usr/bin/python3 /usr/bin/python  # Cr√©e un lien symbolique vers python3
          python --version  # V√©rifier que python fonctionne

      # √âtape 4 : Installer Poetry
      - name: Install Poetry
        run: |
          echo "Installing Poetry..."
          curl -sSL https://install.python-poetry.org | python -
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc
          poetry --version  # V√©rifier que poetry fonctionne

      # √âtape 5 : Installer les d√©pendances avec Poetry
      - name: Poetry Install
        run: |
          poetry install --sync --no-interaction

      # √âtape 6 : Construire le package avec Poetry
      - name: Poetry package
        run: |
          poetry build

      # √âtape 7 : Lister les fichiers dans le repository
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      # √âtape 8 : D√©boguer les variables
      - name: Debug VM variables
        env:
          VM_USER: ${{ vars.VM_USER }}
          VM_PASSWORD: ${{ vars.VM_PASSWORD }}
          VM_IP: ${{ vars.VM_IP }}
        run: |
          echo "Debugging VM Variables:"
          echo "VM_USER: $VM_USER"
          echo "VM_IP: $VM_IP"
          echo "VM_PASSWORD: ******"  # Masquer le mot de passe dans les logs

      # √âtape 9 : D√©ployer sur une machine virtuelle locale
      - name: Deploy to Local VM
        env:
          VM_IP: ${{ vars.VM_IP }}
          VM_PASSWORD: ${{ vars.VM_PASSWORD }}
          VM_USER: ${{ vars.VM_USER }}

        run: |
          echo "Deploying to $VM_USER@$VM_IP..."
          sudo apt-get update && sudo apt-get install -y sshpass
          
          # Copier le package construit vers la VM
          sshpass -p "$VM_PASSWORD" scp dist/*.whl $VM_USER@$VM_IP:/tmp/
          
          # SSH dans la VM pour installer le package
          sshpass -p "$VM_PASSWORD" ssh -o StrictHostKeyChecking=no $VM_USER@$VM_IP << EOF
            python3 -m pip install /tmp/*.whl --no-cache-dir
            rm -f /tmp/*.whl
          EOF

      # √âtape 10 : V√©rifier les fichiers dans le repository (post-d√©ploiement)
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      # √âtape 11 : V√©rifier le statut final du job
      - run: echo "üçè This job's status is ${{ job.status }}."
