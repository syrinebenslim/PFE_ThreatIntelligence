name: Threat Intelligence GitHub Actions CI/CD pipeline

on:
  push:
    branches:
      - main  # Déclenche le workflow lorsque des modifications sont poussées sur la branche "main"

jobs:
  Explore-GitHub-Actions:
    runs-on: self-hosted  # Exécute le workflow sur un runner auto-hébergé

    steps:
      # Étape 1 : Vérifier le code
      - name: Check out repository code
        uses: actions/checkout@v4

      # Étape 2 : Déboguer les variables
      - name: Debug VM variables
        run: |
          echo "VM_IP: ${{ vars.VM_IP }}"
          echo "VM_USER: ${{ vars.VM_USER }}"
          echo "VM_PASSWORD: ${{ vars.VM_PASSWORD }}"

      # Étape 3 : Tester la connectivité avec la VM
      - name: Test VM connectivity
        run: |
          echo "Testing connection to ${{ vars.VM_IP }}..."
          ping -c 4 ${{ vars.VM_IP }}

      # Étape 4 : Déployer sur la VM locale
      - name: Deploy to Local VM
        env:
          VM_IP: ${{ vars.VM_IP }}
          VM_USER: ${{ vars.VM_USER }}
          VM_PASSWORD: ${{ vars.VM_PASSWORD }}
        run: |
          # Installer sshpass si nécessaire
          sudo apt-get update && sudo apt-get install -y sshpass
          
          # Copier le fichier construit sur la VM
          echo "Copying files to $VM_USER@$VM_IP..."
          sshpass -p "$VM_PASSWORD" scp dist/*.whl $VM_USER@$VM_IP:/tmp/

          # Se connecter à la VM et installer le package
          echo "Connecting to $VM_USER@$VM_IP and installing package..."
          sshpass -p "$VM_PASSWORD" ssh -o StrictHostKeyChecking=no $VM_USER@$VM_IP << EOF
            python3 -m pip install /tmp/*.whl --no-cache-dir
            rm -f /tmp/*.whl
          EOF
